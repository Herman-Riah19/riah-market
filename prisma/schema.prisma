generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?   @unique
  password          String?
  address           String   @unique
  signature         String?
  chainId           String?
  network           String?
  rememberMe        String?
  salt              String?
  twoFactorEnabled  Boolean? @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]

  createdProducts   Product[] @relation("CreatedProducts")
  profileProducts   Product[] @relation("ProfileUser")
  ownerProducts     Product[] @relation("OwnerUser")
  buyerProducts     Product[] @relation("BuyerUser")

}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Nonce {
  id        String   @id @default(cuid())
  address   String   @unique
  nonce     String
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(cuid())
  title       String
  creator     String?
  price       Float
  image       String
  profile     String?
  description String?
  tokenId     String?
  contract    String?
  owner       String?
  buyer       String?
  mintedOn    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorUser User?    @relation("CreatedProducts", fields: [creator], references: [id])
  profileUser User?    @relation("ProfileUser", fields: [profile], references: [image])
  ownerUser   User?    @relation("OwnerUser", fields: [owner], references: [address])
  buyerUser   User?    @relation("BuyerUser", fields: [buyer], references: [address])
}